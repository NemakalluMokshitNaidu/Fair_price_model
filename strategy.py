# -*- coding: utf-8 -*-
"""Untitled43.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nOhsdxh2oRCQ4U3WMvIZi-YU63iXFSaU
"""

import numpy as np

# Step 1: Define Variable Ranges for Optimization
long_variables = range(1, 5)  # Example range for long variables
short_variables = range(1, 5)  # Example range for short variables
stop_loss_variables = range(1, 5)  # Example range for stop loss variables

best_sharpe_ratio = -np.inf  # Initialize best Sharpe ratio
best_long_var = 0  # Initialize best long variable
best_short_var = 0  # Initialize best short variable
best_stop_loss_var = 0  # Initialize best stop loss variable

# Step 2: Loop through Variable Combinations
for long_var in long_variables:
    for short_var in short_variables:
        for stop_loss_var in stop_loss_variables:
            # Step 3: Initialize Variables
            position = 0
            capital = 10000  # Initial investment amount
            shares = 0  # Number of shares held
            trade_count = 0  # Number of trades
            hit_count = 0  # Number of successful trades
            returns = []  # List to store returns
            entry_price = 0  # Price at which position was entered
            exit_price = 0  # Price at which position was exited
            prev_z = None  # Previous z-score value
            entry_date = None  # Date of entering the trade

            holding_periods = []  # List to store holding periods

            # Step 4: Loop through the Data
            trade_return = 0  # Initialize trade_return
            for i, row in enumerate(data.iterrows()):
                date, z = row[1]['Date'], row[1]['Deviation Score(z)']

                # Enter Long Position
                if z > -long_var and prev_z is not None and prev_z < -long_var and position != 1:
                    position = 1
                    entry_price = row[1]['Price']
                    shares = capital / entry_price
                    entry_date = date
                    capital -= shares * entry_price

                # Exit Long Position
                if (z < -1 and prev_z is not None and prev_z > -1 and position == 1) or z < -stop_loss_var:
                    position = 0
                    exit_price = row[1]['Price']
                    trade_return = (exit_price - entry_price) * shares / entry_price
                    returns.append(trade_return)

                    if trade_return > 0:
                        hit_count += 1

                    trade_count += 1

                    holding_period = (date - entry_date).days
                    holding_periods.append(holding_period)
                    capital += shares * exit_price

                # Enter Short Position
                if z < short_var and prev_z is not None and prev_z > short_var and position != -1:
                    position = -1
                    entry_price = row[1]['Price']
                    shares = capital / entry_price
                    entry_date = date
                    capital -= shares * entry_price

                # Exit Short Position
                if (z > 1 and prev_z is not None and prev_z < 1 and position == -1) or z > stop_loss_var:
                    position = 0
                    exit_price = row[1]['Price']
                    trade_return = (entry_price - exit_price)
                # Exit Short Position
                if (z > 1 and prev_z is not None and prev_z < 1 and position == -1) or z > stop_loss_var:
                    position = 0
                    exit_price = row[1]['Price']
                    trade_return = (entry_price - exit_price) * shares / entry_price
                    returns.append(trade_return)

                    if trade_return > 0:
                        hit_count += 1

                    trade_count += 1

                    holding_period = (date - entry_date).days
                    holding_periods.append(holding_period)
                    capital += shares * exit_price

                prev_z = z  # Store current z-score as previous for the next iteration

            # Step 5: Calculate Metrics
            total_return = sum(returns)
            hit_rate = hit_count / trade_count
            average_return_per_trade = total_return / trade_count

            # Step 6: Calculate Sharpe Ratio
            returns_array = np.array(returns)
            daily_returns = np.log(1 + returns_array)
            sharpe_ratio = np.mean(daily_returns) / np.std(daily_returns)

            # Step 7: Update Best Sharpe Ratio and Variables
            if sharpe_ratio > best_sharpe_ratio:
                best_sharpe_ratio = sharpe_ratio
                best_long_var = long_var
                best_short_var = short_var
                best_stop_loss_var = stop_loss_var

# Step 8: Print Results
print("Best Sharpe Ratio:", best_sharpe_ratio)
print("Best Long Variable:", best_long_var)
print("Best Short Variable:", best_short_var)
print("Best Stop Loss Variable:", best_stop_loss_var)